import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../../app/store';
import {
  fetchTokenAsync,
  fetchUserAsync,
  AuthorizeState,
  FetchTokenResult,
  FetchUserResult,
} from './authorizeAPI';


const initialState: AuthorizeState = {
  accessToken: null,
  refreshToken: null,
  user: null,
  status: 'unauthorized'
};

export const fetchToken = createAsyncThunk(
  'authorize/fetchToken',
  async () => {
    const response = await fetchTokenAsync();
    return {
      accessToken: response.accessToken,
      refreshToken: response.refreshToken
    };
  }
);

export const fetchUser = createAsyncThunk(
  'authorize/fetchUser',
  async () => {
    const response = await fetchUserAsync();
    return response.user;
  }
);

export const counterSlice = createSlice({
  name: 'authorize',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getToken: (state, action: PayloadAction<FetchTokenResult>) => {
      state.accessToken = action.payload.accessToken;
      state.refreshToken = action.payload.refreshToken;
    },
    getUser: (state, action: PayloadAction<FetchUserResult>) => {
      state.user = action.payload.user;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchToken.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchToken.fulfilled, (state, action) => {
        state.status = 'authorized';
        state.accessToken = action.payload.accessToken;
        state.refreshToken = action.payload.refreshToken;
      })
      .addCase(fetchToken.rejected, (state) => {
        state.status = 'unauthorized';
      });
  },
});

export const { getToken, getUser } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value;

export default counterSlice.reducer;
