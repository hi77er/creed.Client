import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../../app/store';
import {
  fetchTokenAsync,
  fetchCurrentUserAsync,
  AuthorizeState,
  FetchTokenRequestBody,
} from './authorizeAPI';


const initialState: AuthorizeState = {
  accessToken: null,
  refreshToken: null,
  user: null,
  status: 'unauthorized'
};

export const fetchToken = createAsyncThunk(
  'authorize/fetchToken',
  async (params: FetchTokenRequestBody, { rejectWithValue }) => {
    try {
      const response = await fetchTokenAsync({
        email: params.email,
        password: params.password
      });
      console.log('response')
      console.log(response)
      return {
        accessToken: response.accessToken,
        refreshToken: response.refreshToken
      };
    } catch (err) {
      console.log('err')
      return rejectWithValue(null);
    }
  }
);

export const fetchCurrentUser = createAsyncThunk('authorize/fetchCurrentUser',
  async () => {
    const response = await fetchCurrentUserAsync();
    return response.user;
  }
);

export const authorizeSlice = createSlice({
  name: 'authorize',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // {
  //   getToken: (state, action: PayloadAction<FetchTokenResult>) => {
  //     state.accessToken = action.payload.accessToken;
  //     state.refreshToken = action.payload.refreshToken;
  //   },
  //   getCurrentUser: (state, action: PayloadAction<FetchCurrentUserResult>) => {
  //     state.user = action.payload.user;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchToken.pending, (state) => {
        state.status = 'loading';
        state.accessToken = null;
        state.refreshToken = null;
      })
      .addCase(fetchToken.fulfilled, (state, action) => {
        state.status = 'authorized';
        state.accessToken = action?.payload?.accessToken ?? null;
        state.refreshToken = action?.payload?.refreshToken ?? null;
      })
      .addCase(fetchToken.rejected, (state) => {
        state.status = 'unauthorized';
        state.accessToken = null;
        state.refreshToken = null;
      });
  },
});

export const authorizeReducer = authorizeSlice.reducer;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const authStatus = (state: RootState) => state.authorizer.status;

export default authorizeSlice.reducer;
