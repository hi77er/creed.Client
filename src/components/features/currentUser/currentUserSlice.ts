import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../../app/store';
import {
  fetchCurrentUserAsync,
  CurrentUserState,
  FetchCurrentUserResult,
  FetchCurrentUserError,
} from './currentUserAPI';

const initialState: CurrentUserState = {
  status: 'loading',
  loginProvider: null,
  currentUser: null,
  errorMessage: null,
};

export const fetchCurrentUser =
  createAsyncThunk<FetchCurrentUserResult, void, { rejectValue: FetchCurrentUserError }>(
    'currentUser/fetchCurrentUser',
    async (_: void, { rejectWithValue }) => {
      try {
        const response = await fetchCurrentUserAsync();
        if (response.currentUser == '')
          return rejectWithValue({ errorMessage: "User not found!" });
        return { user: response.currentUser, loginProvider: response.loginProvider };
      } catch (err: any) {
        return rejectWithValue({ errorMessage: "User not found!" });
      }
    }
  );

export const currentUserSlice = createSlice({
  name: 'currentUser',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetCurrentUser: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.currentUser = initialState.currentUser;
      state.status = initialState.status;
      state.errorMessage = initialState.errorMessage;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCurrentUser.pending, (state) => {
        state.status = 'loading';
        state.loginProvider = null;
        state.currentUser = null;
        state.errorMessage = null;
      })
      .addCase(fetchCurrentUser.fulfilled, (state, action) => {
        state.status = 'found';
        state.loginProvider = action?.payload?.loginProvider ?? null;
        state.currentUser = action?.payload?.user ?? null;
        state.errorMessage = null;
      })
      .addCase(fetchCurrentUser.rejected, (state, action) => {
        state.status = 'notfound';
        state.loginProvider = null;
        state.currentUser = null;
        state.errorMessage = action.payload?.errorMessage ?? null;
      });
  },
});

export const { resetCurrentUser } = currentUserSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const errorMessage = (state: RootState) => state.currentUser?.errorMessage;
export const currentUser = (state: RootState) => state.currentUser?.currentUser;
export const userStatus = (state: RootState) => state.currentUser?.status;
export const loginProvider = (state: RootState) => state.currentUser?.loginProvider;

export default currentUserSlice.reducer;
